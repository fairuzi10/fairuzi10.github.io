{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/inheritance-tanpa-oop/","result":{"data":{"post":{"html":"<p>Minggu ini, DDP 2 yang merupakan matkul asdosan saya memasuki materi <em>inheritance</em> dan <em>polymorphism</em>.\nMateri ini membuat saya teringat akan fakta unik yang saya baca dari buku <a href=\"https://www.goodreads.com/book/show/18043011-clean-architecture\">Clean Architecture karya Robert C. Marthin “Uncle Bob”</a>.\n<em>Inheritance</em> yang merupakan salah satu pilar <em>Object Oriented Programming (OOP)</em> rupanya bukan merupakan monopoli oleh OOP itu sendiri.\nHal ini menarik bagi saya karena bahkan saya baru tahu <em>inheritance</em> ketika belajar OOP.\nLalu seperti apa jadinya <em>inheritance</em> tanpa OOP? Mari kita lihat.</p>\n<p>Mari gunakan bahasa C sehingga menyerupai kondisi dahulu ketika bahasa yang cukup <em>high level</em> adalah C dan tidak mendukung OOP.\nIngat bahwa enkapsulasi data di C menggunakan tipe data yang disebut <em>struct</em>.\nJika familiar dengan <em>struct</em> pada C++, <em>struct</em> pada C sedikit berbeda, misalnya tidak bisa membuat <em>method</em> sehingga OOP memang tidak didukung.</p>\n<p>Anggap kita memiliki sebuah struktur data <code class=\"language-text\">Point</code>.\nKita memiliki sebuah fungsi <code class=\"language-text\">distance</code> yang dapat mengukur jarak antara dua <code class=\"language-text\">Point</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span><span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span><span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> delta_x <span class=\"token operator\">=</span> p1<span class=\"token operator\">-></span>x <span class=\"token operator\">-</span> p2<span class=\"token operator\">-></span>x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> delta_y <span class=\"token operator\">=</span> p1<span class=\"token operator\">-></span>y <span class=\"token operator\">-</span> p2<span class=\"token operator\">-></span>y<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>delta_x <span class=\"token operator\">*</span> delta_x <span class=\"token operator\">+</span> delta_y <span class=\"token operator\">*</span> delta_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lalu kita ingin membuat sebuah <code class=\"language-text\">Point</code> namun dengan nama. Mari kita buat <em>struct</em> <code class=\"language-text\">NamedPoint</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">NamedPoint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Perhatikan bahwa <code class=\"language-text\">NamedPoint</code> pada bahasa <em>object-oriented</em> seharusnya dideklarasikan <em>inherit</em> dari <code class=\"language-text\">Point</code>, namun pada contoh ini tidak dilakukan demikian karena bahasa C tidak mendukung OOP.</p>\n<p>Dengan <em>inheritance</em> pada OOP, kita tahu bahwa kita dapat menggunakan <em>method</em> dari <em>superclass</em>.\nPada kasus ini, kita berharap bisa menggunakan fungsi <code class=\"language-text\">distance</code> milik <code class=\"language-text\">Point</code> pada <code class=\"language-text\">NamedPoint</code>.\nApakah bisa kita menggunakan fungsi <code class=\"language-text\">distance</code> pada <code class=\"language-text\">NamedPoint</code>? Rupanya bisa!</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">NamedPoint</span><span class=\"token operator\">*</span> <span class=\"token function\">makeNamedPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">NamedPoint</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">NamedPoint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">NamedPoint</span><span class=\"token operator\">*</span> pointOne <span class=\"token operator\">=</span> <span class=\"token function\">makeNamedPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">NamedPoint</span><span class=\"token operator\">*</span> pointTwo <span class=\"token operator\">=</span> <span class=\"token function\">makeNamedPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> distOneTwo <span class=\"token operator\">=</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> pointOne<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> pointTwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"distance=%f\\n\"</span><span class=\"token punctuation\">,</span> distOneTwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ternyata, <code class=\"language-text\">NamedPoint</code> bisa diubah menjadi <code class=\"language-text\">Point</code>!\nPerubahan ini disebut juga <em>upcasting</em> yang pada OOP tidak perlu dilakukan secara eksplisit.\n<em>Upcasting</em> ini dapat berhasil karena urutan atribut <code class=\"language-text\">x</code> dan <code class=\"language-text\">y</code> pada <code class=\"language-text\">Point</code> dan <code class=\"language-text\">NamedPoint</code> sama.\nHal ini lah yang dilakukan <em>coder</em> untuk menggunakan <em>inheritance</em> sebelum bahasa <em>object-oriented</em> muncul.</p>\n<p>Walau ternyata bisa melakukan <em>inheritance</em>, namun jelas cara ini kurang menyenangkan karena harus menjaga urutan atribut dan melakukan <em>upcasting</em> secara manual.\nTapi tetap saja, fakta ini cukup unik karena ternyata <em>inheritance</em> tidak diciptakan oleh OOP.\nKira-kira, OOP hanya “mengamankan” implementasi <em>inheritance</em> sehingga kita tidak perlu melakukan kesalahan seperti salah urutan atribut yang rentan dilakukan pada cara tradisional ini.</p>\n<hr class=\"section-divider\" />\n<p>Sekian pos singkat nan random ini. Tentu masih banyak hal <em>magic</em> yang saya baru tahu dari buku ini. OOP saja bahkan masih banyak yang belum saya bahas di tulisan ini, misalnya <em>encapsulation</em> dan <em>polymorphism</em>. Silakan baca buku ini di bab 5 jika tertarik untuk belajar lebih lanjut <img class=\"emoji-icon\" alt=\"emoji-stuck_out_tongue_closed_eyes\" data-icon=\"emoji-stuck_out_tongue_closed_eyes\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-stuck_out_tongue_closed_eyes\">.</p>","frontmatter":{"title":"Inheritance Tanpa OOP","date":"11 April 2020","description":"Masih berpikir bahwa inheritance hanya dapat dilakukan dengan OOP? Baca pos ini dan ubah pemikiran tersebut.","tags":["SoftwareEngineering","RandomFact"],"thumbnail":{"publicURL":"/static/fd3c097a6822415e1ff1b7de7b01916b/cover.png"},"lang":"id"},"fields":{"slug":"/blog/inheritance-tanpa-oop/"}},"relatedPost":{"edges":[{"node":{"id":"5b01096c-bcbf-50cd-be72-52036a074412","fields":{"slug":"/blog/upscale-gojek/"},"frontmatter":{"title":"Gojek Upscale 3.0: Ready to Upscale Yourself?","description":"Want to learn best practices of software engineering from experts in the industry? Gojek Upscale is for you. Find out what will you get by joining this great event."}}}]}},"pageContext":{"slug":"/blog/inheritance-tanpa-oop/","tags":["SoftwareEngineering","RandomFact"]}}}