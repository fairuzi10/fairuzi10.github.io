{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/dark-link.js","webpack:///./src/components/section-divider.js"],"names":["Post","node","frontmatter","date","title","description","tagsText","tags","map","tag","to","blogTagUrl","key","className","thumbnail","childImageSharp","fluid","id","timeToRead","blogUrl","fields","slug","postList","data","allMarkdownRemark","edges","blogListUrl","block","size","method","action","htmlFor","type","name","placeholder","required","rows","DarkGatsbyLink","Link","color","COLOR","dark","textDecoration","DarkA","DarkLink","otherProps","href","SectionDivider"],"mappings":"2FAAA,6LAqCaA,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACWA,EAAKC,YAAxCC,EADwB,EACxBA,KAAMC,EADkB,EAClBA,MAAOC,EADW,EACXA,YACfC,EAF0B,EACEC,KACZC,KAAI,SAAAC,GAAG,OAC3B,YAAC,IAAD,CAAMC,GAAIC,YAAWF,EAAXE,CAAgB,GAAIC,IAAKH,EAAKI,UAAU,QAAlD,IACIJ,EAAK,QAGLK,EAAYb,EAAKC,YAAYY,UAC/Bb,EAAKC,YAAYY,UAAUC,gBAAgBC,MAC3C,GAEJ,OACE,mBAAKJ,IAAKX,EAAKgB,IACb,uBACGd,EADH,MACeF,EAAKiB,WADpB,aAGA,uBACE,YAAC,QAAD,CAAOR,GAAIS,YAAQlB,EAAKmB,OAAOC,OAAQjB,IAExCU,GACC,mBAAKD,UAAU,mBACb,mBAAKA,UAAU,oDACb,YAAC,IAAD,CAAMH,GAAIS,YAAQlB,EAAKmB,OAAOC,OAC5B,YAAC,IAAD,CAAgBL,MAAOF,OAK/B,uBAAMT,GACLC,EACD,kBAAIO,UAAU,WAKL,sBAAe,IAEtBS,EAFqB,EAAXC,KACOC,kBAAkBC,MACdjB,KAAI,gBAAGP,EAAH,EAAGA,KAAH,OAC7B,YAACD,EAAD,CAAMC,KAAMA,EAAMW,IAAKX,EAAKmB,OAAOC,UAGrC,OACE,YAAC,IAAD,KACE,mBAAKR,UAAU,uBACb,mBAAKA,UAAU,mBACb,mBAAKA,UAAU,QACb,YAAC,IAAD,CAAMA,UAAU,QACd,kBAAIA,UAAU,eAAd,aACA,kBAAIA,UAAU,eACZ,yDAGJ,uBACE,YAAC,IAAD,KACE,kBAAIA,UAAU,eACZ,YAAC,IAAD,CAAUH,GAAG,UAAb,gBAEF,YAAC,IAAD,MACCY,EACD,mBAAKT,UAAU,iCACb,mBAAKA,UAAU,mBACb,YAAC,IAAD,CACEH,GAAIgB,YAAY,GAChBb,UAAU,gCAEV,YAAC,IAAD,CAAQc,OAAK,EAACC,KAAK,MAAnB,6BAUd,mBAAKf,UAAU,gCACb,YAAC,IAAD,CAAMA,UAAU,2BACd,oBACEgB,OAAO,OACPC,OAAO,6DAEP,qCACA,mBAAKjB,UAAU,cACb,qBAAOkB,QAAQ,QAAf,QACA,qBACEC,KAAK,OACLnB,UAAU,eACVI,GAAG,OACHgB,KAAK,OACLC,YAAY,qBAGhB,mBAAKrB,UAAU,cACb,qBAAOkB,QAAQ,cAAf,SACA,wBACElB,UAAU,eACVI,GAAG,aACHgB,KAAK,aACLE,UAAQ,EACRD,YAAY,2CACZE,KAAK,OAGT,sBAAQJ,KAAK,SAASnB,UAAU,iCAAhC,gB,0HCvIRwB,EAAiB,YAAOC,OAAP,sBAAa,CAClCC,MAAOC,IAAMC,KACb,SAAU,CACRF,MAAOC,IAAMC,KACbC,eAAgB,eAIdC,EAAQ,sCAAS,CACrBJ,MAAOC,IAAMC,KACb,SAAU,CACRF,MAAOC,IAAMC,KACbC,eAAgB,eAaLE,IATS,SAAC,GAA2B,IAAzBlC,EAAwB,EAAxBA,GAAOmC,EAAiB,sBACjD,OAAQnC,EAAG,IACT,IAAK,IACH,OAAO,YAAC2B,EAAD,aAAgB3B,GAAIA,GAAQmC,IACrC,QACE,OAAO,YAACF,EAAD,aAAOG,KAAMpC,GAAQmC,O,kDCxBrBE,EAAiB,gFAIfA","file":"component---src-pages-index-js-d954708c658b8cd7e0c7.js","sourcesContent":["import Button from '@/components/button'\nimport DarkLink from '@/components/dark-link'\nimport SectionDivider from '@/components/section-divider'\nimport Wrapper from '@/components/wrapper'\nimport { blogListUrl } from '@/utils/urls.js'\nimport { graphql } from 'gatsby'\nimport Link from 'gatsby-link'\nimport React from 'react'\n\nimport { Card } from '../components/card'\nimport { Title } from '../templates/blog-list'\nimport { HoverableImage } from '../components/HoverableImage'\nimport { blogTagUrl, blogUrl } from '../utils/urls.js'\n\n// const Post = ({ node }) => {\n//   const { date, title, description, tags } = node.frontmatter\n//   const tagsText = tags.map(tag => (\n//     <Link to={blogTagUrl(tag)(1)} key={tag} className=\"mx-1\">\n//       #{tag}{' '}\n//     </Link>\n//   ))\n\n//   return (\n//     <div key={node.id}>\n//       <div>\n//         {date} · {`${node.timeToRead} min read`}\n//       </div>\n//       <div>\n//         <Title to={node.fields.slug}>{title}</Title>\n//       </div>\n//       <div className=\"mb-2\">{description}</div>\n//       {tagsText}\n//       <SectionDivider />\n//     </div>\n//   )\n// }\n\nexport const Post = ({ node }) => {\n  const { date, title, description, tags } = node.frontmatter\n  const tagsText = tags.map(tag => (\n    <Link to={blogTagUrl(tag)(1)} key={tag} className=\"mx-1\">\n      #{tag}{' '}\n    </Link>\n  ))\n  const thumbnail = node.frontmatter.thumbnail\n    ? node.frontmatter.thumbnail.childImageSharp.fluid\n    : ''\n\n  return (\n    <div key={node.id}>\n      <div>\n        {date} · {`${node.timeToRead} min read`}\n      </div>\n      <div>\n        <Title to={blogUrl(node.fields.slug)}>{title}</Title>\n      </div>\n      {thumbnail && (\n        <div className=\"text-center row\">\n          <div className=\"col-12 col-md-8 offset-md-2 col-lg-6 offset-md-3\">\n            <Link to={blogUrl(node.fields.slug)}>\n              <HoverableImage fluid={thumbnail} />\n            </Link>\n          </div>\n        </div>\n      )}\n      <div>{description}</div>\n      {tagsText}\n      <hr className=\"my-4\" />\n    </div>\n  )\n}\n\nexport default ({ data }) => {\n  const postEdges = data.allMarkdownRemark.edges\n  const postList = postEdges.map(({ node }) => (\n    <Post node={node} key={node.fields.slug} />\n  ))\n\n  return (\n    <Wrapper>\n      <div className=\"row no-gutters py-3\">\n        <div className=\"col-12 col-lg-8\">\n          <div className=\"mx-3\">\n            <Card className=\"mb-3\">\n              <h1 className=\"text-center\">Fairuzi10</h1>\n              <h6 className=\"text-center\">\n                <i>I explain with words and memes</i>\n              </h6>\n            </Card>\n            <div>\n              <Card>\n                <h4 className=\"text-center\">\n                  <DarkLink to=\"/blog/\">Latest Blog</DarkLink>\n                </h4>\n                <SectionDivider />\n                {postList}\n                <div className=\"d-flex justify-content-center\">\n                  <div className=\"col-12 col-md-8\">\n                    <Link\n                      to={blogListUrl(1)}\n                      className=\"text-decoration-none d-block\"\n                    >\n                      <Button block size=\"lg\">\n                        Lihat Selengkapnya\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-12 col-lg-4 mt-5 mt-lg-0\">\n          <Card className=\"bg-grad-green-blue mx-3\">\n            <form\n              method=\"POST\"\n              action=\"https://getform.io/f/7d498883-1801-4258-acb1-9d58cebf7eac\"\n            >\n              <h4>Kotak Saran</h4>\n              <div className=\"form-group\">\n                <label htmlFor=\"name\">Nama</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Nama (opsional)\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"suggestion\">Saran</label>\n                <textarea\n                  className=\"form-control\"\n                  id=\"suggestion\"\n                  name=\"suggestion\"\n                  required\n                  placeholder=\"Saran konten, penyuntingan, atau apa pun\"\n                  rows=\"4\"\n                />\n              </div>\n              <button type=\"submit\" className=\"d-block ml-auto btn btn-light\">\n                Kirim\n              </button>\n            </form>\n          </Card>\n        </div>\n      </div>\n      {/* <Helmet>\n        <script src=\"https://kwes.io/js/kwes.js\"></script>\n      </Helmet> */}\n    </Wrapper>\n  )\n}\n\nexport const query = graphql`\n  query blogHomepageQuery {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: 3\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM YYYY\")\n            tags\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(quality: 90) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { COLOR } from '../styles/theme'\nimport { Link } from 'gatsby'\n\nconst DarkGatsbyLink = styled(Link)({\n  color: COLOR.dark,\n  ':hover': {\n    color: COLOR.dark,\n    textDecoration: 'underline'\n  }\n})\n\nconst DarkA = styled.a({\n  color: COLOR.dark,\n  ':hover': {\n    color: COLOR.dark,\n    textDecoration: 'underline'\n  }\n})\n\nexport const DarkLink = ({ to, ...otherProps }) => {\n  switch (to[0]) {\n    case '/':\n      return <DarkGatsbyLink to={to} {...otherProps} />\n    default:\n      return <DarkA href={to} {...otherProps} />\n  }\n}\n\nexport default DarkLink\n","import styled from '@emotion/styled'\n\nexport const SectionDivider = styled.hr({\n  margin: '1rem 0'\n})\n\nexport default SectionDivider\n"],"sourceRoot":""}