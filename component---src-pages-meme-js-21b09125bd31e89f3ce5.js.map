{"version":3,"sources":["webpack:///./src/pages/meme.js"],"names":["pageQuery","MemePage","images","array","counter","slice","length","index","Math","floor","random","temp","shuffle","data","allFile","edges","map","nodeObject","img","node","childImageSharp","fluid","path","relativePath","postUrl","indexOf","className","key","to","evenImages","filter","el","idx","oddImages","name","content"],"mappings":"2FAAA,2JAsEaA,EAAS,YAiBPC,UAjEE,SAAC,GAIX,IAECC,EApBQ,SAAAC,GAId,IAFA,IAAIC,GADJD,EAAQA,EAAME,SACMC,OAEbF,EAAU,GAAG,CAClB,IAAMG,EAAQC,KAAKC,MAAMD,KAAKE,SAAWN,GAEnCO,EAAOR,IADbC,GAEAD,EAAMC,GAAWD,EAAMI,GACvBJ,EAAMI,GAASI,EAEjB,OAAOR,EAQOS,CADV,EAHJC,KACEC,QAAWC,OAIQC,KAAI,SAAAC,GACvB,IAAMC,EAAMD,EAAWE,KAAKC,gBAAgBC,MACtCC,EAAOL,EAAWE,KAAKI,aAEvBC,EAAUF,EAAKjB,MAAM,EAAGiB,EAAKG,QAAQ,IADnB,IAExB,OACE,mBAAKC,UAAU,OAAOC,IAAKL,GACzB,YAAC,OAAD,CAAMM,GAAIJ,GACR,YAAC,IAAD,CAAKH,MAAOH,SAKdW,EAAa3B,EAAO4B,QAAO,SAACC,EAAIC,GAAL,OAAaA,EAAM,GAAM,KACpDC,EAAY/B,EAAO4B,QAAO,SAACC,EAAIC,GAAL,OAAaA,EAAM,GAAM,KACzD,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,iCACA,oBAAME,KAAK,WAAWC,QAAQ,SAC9B,oBACED,KAAK,cACLC,QAAQ,yCAEV,oBACED,KAAK,iBACLC,QAAQ,0CAGZ,YAAC,IAAD,KACE,kBAAIT,UAAU,eAAd,+DAGA,mBAAKA,UAAU,8BACb,mBAAKA,UAAU,mBAAmBG,GAAkB,IACpD,mBAAKH,UAAU,mBAAmBO","file":"component---src-pages-meme-js-21b09125bd31e89f3ce5.js","sourcesContent":["import Card from '@/components/card'\nimport { graphql, Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nimport Wrapper from '../components/wrapper.js'\n\nconst shuffle = array => {\n  array = array.slice()\n  let counter = array.length\n\n  while (counter > 0) {\n    const index = Math.floor(Math.random() * counter)\n    counter--\n    const temp = array[counter]\n    array[counter] = array[index]\n    array[index] = temp\n  }\n  return array\n}\n\nconst MemePage = ({\n  data: {\n    allFile: { edges }\n  }\n}) => {\n  const memes = shuffle(edges)\n  const images = memes.map(nodeObject => {\n    const img = nodeObject.node.childImageSharp.fluid\n    const path = nodeObject.node.relativePath\n    const blogPrefixIndex = 5\n    const postUrl = path.slice(0, path.indexOf('/', blogPrefixIndex))\n    return (\n      <div className=\"py-4\" key={path}>\n        <Link to={postUrl}>\n          <Img fluid={img} />\n        </Link>\n      </div>\n    )\n  })\n  const evenImages = images.filter((el, idx) => idx % 2 === 0)\n  const oddImages = images.filter((el, idx) => idx % 2 === 1)\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Meme</title>\n        <meta name=\"og:title\" content=\"Meme\" />\n        <meta\n          name=\"description\"\n          content=\"Kumpulan meme yang ada pada blog ini\"\n        />\n        <meta\n          name=\"og:description\"\n          content=\"Kumpulan meme yang ada pada blog ini\"\n        />\n      </Helmet>\n      <Card>\n        <h5 className=\"text-center\">\n          Klik gambar untuk membaca pos dan mendapatkan konteksnya :)\n        </h5>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-12 col-lg-6\">{evenImages}</div>{' '}\n          <div className=\"col-12 col-lg-6\">{oddImages}</div>\n        </div>\n      </Card>\n    </Wrapper>\n  )\n}\n\nexport const pageQuery = graphql`\n  {\n    allFile(filter: { absolutePath: { regex: \"/meme//\" } }) {\n      edges {\n        node {\n          childImageSharp {\n            fluid {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`\n\nexport default MemePage\n"],"sourceRoot":""}