{"data":{"post":{"html":"<p>Do you know that you could code C++ and use it in your Node Application? What are the benefits? Does it make you application faster? Is it worth it to do? No, it isn’t. Don’t get me wrong, let me explain <img class=\"emoji-icon\" data-icon=\"emoji-simple_smile\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; width: 20px\" src=\"data:image/png;base64, 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\">.</p>\n<h2>C++ Addons</h2>\n<blockquote>\n<p>Node.js Addons are dynamically-linked shared objects, written in C++, that can be loaded into Node.js using the require() function, and used just as if they were an ordinary Node.js module.</p>\n</blockquote>\n<p>So basically, you could code C++ and use it in your Node application like following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> addon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-method-addon'</span><span class=\"token punctuation\">)</span>\naddon<span class=\"token punctuation\">.</span><span class=\"token function\">aMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>So why bother leaving the beautiful Javascript world and go into the dark, compiled, and low-level world of C++? I thought it must be for performance. Come on, who doesn’t know that C++ is one of the fastest language around? So I decided to give it a shot in hope that I would make super-fast code and can publish it in NPM like our fellow cool JS boys do every seconds. So what is the result? Let’s jump right into the benchmark. Anyway, all codes are available <a href=\"TODO\">in my Github</a> and the data is in <a href=\"https://docs.google.com/spreadsheets/d/15oy6BME_C3uDi9Y_-8E_NRg-Sm36LTynSsseFsULGP0/edit?usp=sharing\">Google Spreadsheets</a>.</p>\n<h2>Matrix Exponentiation</h2>\n<p>For the first experiment, instead of the boring prime-generator-or-so problem, let’s just try matrix exponentiation. For the sake of simplicity, let’s use naive matrix multiplication in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> but with <a href=\"https://en.wikipedia.org/wiki/Modular_exponentiation\">modular exponentiation</a> result in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>3</mn></msup><mi>l</mi><mi>o</mi><mi>g</mi><mi>P</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^3logP)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span></span></span></span> algorithm. Before we go to the exponentation, let’s do some benchmarking for just multiplication.</p>\n<p><img src=\"multiplication.png\"></p>\n<p>As we could see, C++ addon beats plain Javascript implementation by around 380%. Now it’s time for exponentiation, let’s put <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">N = 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> to make things simple (who likes multi-variable function?).</p>\n<p><img src=\"exponentiation.png\"></p>\n<p>We got around 430% improvement.</p>","frontmatter":{"title":"Do C++ Addons Improve Node JS Performance? A Benchmark","date":"14 January 2019","description":"Do you know that you could code C++ and use it in your Node Application? What are the benefits? Does it make you application faster? Is it worth it to do? Let the benchmark explains.","tags":["Coding","SoftwareDevelopment"]},"fields":{"slug":"/do-cpp-addons-improve-node-js-performance/"}},"relatedPost":{"edges":[{"node":{"id":"767e6fa2-bfb6-58de-a013-faff32ba8b36","fields":{"slug":"/tech-intern-at-bizzy/"},"frontmatter":{"title":"Hari-hari sebagai Tech Intern di Bizzy","description":"Keseharian saya pada saat magang sebagai software development engineer di Bizzy."}}},{"node":{"id":"9ef0cf76-7bc0-51c1-89a7-ae0d43a4e144","fields":{"slug":"/nyampah-osn-komputer/"},"frontmatter":{"title":"Apakah Penting Nyampah pada OSN Komputer?","description":"Hal yang dapat membuatmu menjadi medalis namun sering dilupakan."}}}]}},"pageContext":{"slug":"/do-cpp-addons-improve-node-js-performance/","tags":["Coding","SoftwareDevelopment"]}}